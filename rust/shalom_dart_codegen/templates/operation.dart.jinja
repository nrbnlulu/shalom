{% include "macros" %}

{# Recursive macro for deserializing selection values #}
{% macro _deserialize_selection_from_cache_macro(value_symbol, selection, is_optional=false) -%}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) -%}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% else %}
                {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {% if is_optional %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
            {% else %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
            {% endif %}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% set id_field = get_id_selection(selection.full_name) -%}
        {% if is_optional %}
            {{value_symbol}} == null ? null :
                {% if id_field is not none -%}
                    {{selection.full_name}}.fromCached(
                        ctx.getCachedRecord({{value_symbol}} as String),
                        ctx
                    );
                {% else %}
                {{ selection.full_name }}.fromCached({{ value_symbol }}, {ctx: ctx});
                {% endif %}
        {% else %}
            {% if  id_field is not none -%}
                {{selection.full_name}}.fromCached(ctx.getCachedRecord({{value_symbol}} as String), ctx);
            {% else %}
                {{ selection.full_name }}.fromCached({{value_symbol}}, {ctx: ctx});
            {% endif %}
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% set typename = selection.concrete_type.name %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ typename }}.fromString({{ value_symbol }})
        {% else %}
            {{ typename }}.fromString({{ value_symbol }})
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_from_cache_macro("e", inner_selection, false) }}).toList()
        {% else %}
            ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_from_cache_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {% if is_optional %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
        {% else %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
        {% endif %}
    {% endif %}
{% endmacro %}


{# Recursive macro for serializing selection values #}
{% macro _serialize_selection_value_macro(value_symbol, selection, is_optional=false) %}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) %}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.serialize({{ value_symbol }}!)
            {% else %}
                {{ scalar_impl }}.serialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {{ value_symbol }}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% if is_optional %}
            {{ value_symbol }}?.toJson()
        {% else %}
            {{ value_symbol }}.toJson()
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% if is_optional %}
            {{ value_symbol }}?.name
        {% else %}
            {{ value_symbol }}.name
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }}?.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% else %}
            {{ value_symbol }}.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {{ value_symbol }}
    {% endif %}
{% endmacro %}

{# Recursive macro for equality comparison #}
{% macro _equality_comparison_macro(field_symbol, selection, other_symbol) %}
    {% if selection.kind == "List" %}
        const ListEquality().equals({{ other_symbol }}.{{ field_symbol }}, {{ field_symbol }})
    {% else %}
        {{ other_symbol }}.{{ field_symbol }} == {{ field_symbol }}
    {% endif %}
{% endmacro %}
// ignore_for_file: constant_identifier_names, non_constant_identifier_names, unused_import, camel_case_types, unnecessary_this, unnecessary_non_null_assertion, depend_on_referenced_packages

import "schema.shalom.dart";
{% for path, namespace_alias in extra_imports | items -%}
import '{{path}}' as {{ namespace_alias }};
{% endfor %}
{% set OP_TYPE = operation.context.op_ty.name|upper %}

import 'package:shalom_core/shalom_core.dart';
import 'package:collection/collection.dart';


{% set operation_name = operation.context.operation_name %}
{% macro selection_object_impl(typename, selection_object, is_root_selection) %}
    {% set selections = selection_object.selections %}
    /// class members
    {% for selection in selections -%}
        {% set selection_name = selection.name %}
        final {{ type_name_for_selection(selection) }} {{ selection_name }};
    {% endfor %}
    // keywordargs constructor
    {{ typename }}({
    {% for selection in selections -%}
        {% if not selection.is_optional %}required{% endif %}
        this.{{ selection.name }},
    {% endfor %}
    });

    static void normalize$inCache(JsonObject data,
            CacheUpdateContext ctx,
            {% if not is_root_selection -%}
                {
                /// can be just the selection name but also may include serialized arguments.
                required RecordID  this$fieldName,
                required JsonObject parent$record,
                required RecordID parent$normalizedID
                }
            {% endif -%}
            ){
        {% if is_root_selection -%}
            // TODO: arguments
            final String this$fieldName = "{{selection_object.name}}";
            final String this$normalizedID = "ROOT_{{OP_TYPE}}";
            final this$NormalizedRecord = ctx.getOrCreateCachedObjectRecord("ROOT_{{OP_TYPE}}");;
        {% else %}
            {% set id_field = get_id_selection(selection_object.full_name) -%}
            {% set is_normalized = false -%}
            String this$normalizedID;
            JsonObject this$NormalizedRecord;
            {% if is_type_implements_node(selection_object.full_name) %}
                final this$normalizedID_temp = data["id"] as RecordID?;
                if (this$normalizedID_temp == null) {
                    throw UnimplementedError("Node ID cannot be null");
                }
                this$normalizedID = this$normalizedID_temp!;
                parent$record[this$fieldName] = this$normalizedID;
                this$NormalizedRecord = ctx.getOrCreateCachedObjectRecord(this$normalizedID);
                ctx.addDependantRecord(this$normalizedID);
                {% set is_normalized = true -%}
            {% elif id_field is not none -%}
                final RecordID? this$normalizedID_temp = data["{{id_field.name}}"] as RecordID?;
                if (this$normalizedID_temp == null) {
                    {% if id_field.is_optional %}
                        this$normalizedID = "${parent$normalizedID}.${this$fieldName}";
                        this$NormalizedRecord = getOrCreateObject(parent$record, this$fieldName);
                    {% else %}
                        throw UnimplementedError("Required ID cannot be null");
                    {% endif %}
                } else {
                    this$normalizedID = this$normalizedID_temp!;
                    parent$record[this$fieldName] = this$normalizedID;
                    this$NormalizedRecord = ctx.getOrCreateCachedObjectRecord(this$normalizedID);
                    ctx.addDependantRecord(this$normalizedID);
                    {% set is_normalized = true -%}
                }
            {% else %}
                this$NormalizedRecord = getOrCreateObject(parent$record, this$fieldName);
                this$normalizedID = "${parent$normalizedID}.${this$fieldName}";
            {% endif -%}
        {% endif -%}


        // TODO: handle arguments
        {% for selection in selection_object.selections -%}
            final {{selection.name}}Normalized$Key = "{{selection.name}}";
            final {{selection.name}}$normalizedID = "${this$normalizedID}.${ {{selection.name}}Normalized$Key}";
        {% endfor -%}
        ctx.addDependantRecords(
            {
            {% for selection in selection_object.selections -%}
                {{selection.name}}$normalizedID  {{"," |if_not_last(loop.last)}}
            {% endfor -%}
            }
        );

        {% for selection in selection_object.selections -%}
            final {{selection.name}}$cached = this$NormalizedRecord[{{selection.name}}Normalized$Key];
            final {{selection.name}}$raw = data["{{selection.name}}"];
            if ({{selection.name}}$raw != null){
                {% if selection.kind == "Object" %}
                    {# object selections can be subscribed to, but will only get updates for
                        id changes or null<->some changes. sub fields should be subscribed by themself #}
                    if ({{selection.name}}$cached == null){
                        ctx.addChangedRecord({{selection.name}}$normalizedID);
                    }
                    {{selection.full_name}}.normalize$inCache(
                        {{selection.name}}$raw as JsonObject,
                        ctx,
                        this$fieldName: {{selection.name}}Normalized$Key,
                        parent$record: this$NormalizedRecord,
                        parent$normalizedID: this$normalizedID
                    );
                {% else %}
                    if ({{selection.name}}$cached != {{selection.name}}$raw){
                        ctx.addChangedRecord({{selection.name}}$normalizedID);
                    }
                    this$NormalizedRecord[{{selection.name}}Normalized$Key] = {{selection.name}}$raw;
                {% endif %}
            } else if (data.containsKey("{{selection.name}}") && {{selection.name}}$cached != null){
                    // if this field was null in the response and key exists clear the cache.

                    this$NormalizedRecord[{{selection.name}}Normalized$Key] = null;
                    ctx.addChangedRecord({{selection.name}}$normalizedID);
            } else {
                // data is null and cache is null, do nothing.
                this$NormalizedRecord[{{selection.name}}Normalized$Key] = null;
            }

        {% endfor %}
    }
    {% if is_root_selection -%}
    static {{typename}} fromCache(ShalomCtx ctx) {
    {% else -%}
    static {{typename}} fromCached(NormalizedRecordData data, ShalomCtx ctx) {
    {% endif -%}
        {% if is_root_selection -%}
            final data = ctx.getCachedRecord("ROOT_{{OP_TYPE}}");
        {% endif -%}
        {% for selection in selection_object.selections -%}
            {% set raw_value_symbol = selection.name + '$raw' %}
            final {{raw_value_symbol}} = data["{{selection.name}}"];
            final {{type_name_for_selection(selection)}} {{selection.name}}$value = {{ _deserialize_selection_from_cache_macro(raw_value_symbol, selection, selection.is_optional) }};
        {% endfor -%}
        return {{ typename }}(
            {% for selection in selections -%}
                {{selection.name}}: {{selection.name}}$value,
            {% endfor %}
        );
    }
    {% if is_root_selection -%}
        static ({{typename}}, CacheUpdateContext)  fromResponseImpl(JsonObject data, ShalomCtx ctx){
            // first update the cache
            final CacheUpdateContext updateCtx = CacheUpdateContext(shalomContext: ctx!);
            {% set root_selection = selection_object.selections | first -%}
            // TODO: handle arguments
            normalize$inCache(
                data,
                updateCtx,
            );
            ctx.invalidateRefs(updateCtx.changedRecords);
            return (fromCache(ctx), updateCtx);
        }

        static {{typename}} fromResponse(JsonObject data, {ShalomCtx? ctx}){
            // if ctx not provider we create dummy one
            return fromResponseImpl(data, ctx ?? ShalomCtx.withCapacity()).$1;
        }
    {% endif -%}

    @override
    bool operator ==(Object other) {
    return identical(this, other) ||
    (other is {{ typename }} &&
    {% for selection in selections -%}
        {% set selection_name = selection.name %}
        {{ _equality_comparison_macro(selection_name, selection, "other") }} {{ "&&"|if_not_last(loop.last) }}
    {% endfor %}
    );
    }
    @override
    int get hashCode =>
    {% if selections | length > 1 %}
        Object.hashAll([
        {% for selection in selections %}
            {% set selection_name = selection.name %}
            {{ selection_name }},
        {% endfor %}
        ]);
    {% else %}
        {{ (selections | first).name }}.hashCode;
    {% endif %}
    JsonObject toJson() {
    return {
    {% for selection in selections %}
        {% set selection_name = selection.name %}
        '{{ selection_name }}':
            {% if selection.is_optional %}
                {{ _serialize_selection_value_macro("this." + selection_name, selection, true) }}
            {% else %}
                {{ _serialize_selection_value_macro("this." + selection_name, selection, false) }}
            {% endif %}
        ,
    {% endfor %}
    };
    }
{% endmacro %}
typedef JsonObject = Map<String, dynamic>;



{% set root_type_name = operation_name ~ "Response" %}
class {{ root_type_name }}{
{{ selection_object_impl(root_type_name, operation.context.root_type, true) }}
}

// ------------ OBJECT DEFINITIONS -------------

{% for full_name, selection in operation.context.type_defs | items  if selection.kind == "Object" %}
    class {{ full_name }}  {
        {{ selection_object_impl(full_name, selection, false) }}
    }
{% endfor %}

// ------------ END OBJECT DEFINITIONS -------------

{% set op_variables = operation.context.variables %}
class Request{{ operation_name }} extends Requestable {
    {% if op_variables | length > 0 %}
    final {{ operation_name }}Variables variables;
    {% endif %}

    Request{{ operation_name }}(
        {% if op_variables | length > 0 %}
        {
            required this.variables,
        }
        {% endif %}
    );

    @override
    Request toRequest() {
        JsonObject variablesJson = {% if op_variables | length > 0 %} variables.toJson() {% else %} {}  {% endif %};
        return Request(
            query: r"""{{ operation.context.query }}""",
            variables: variablesJson,
            opType: OperationType.{{ operation.context.op_ty.name }},
            opName: '{{ operation_name }}'
        );
    }
}

{% if op_variables | length > 0 %}
class {{ operation_name }}Variables {
    {% set typename = operation_name ~ 'Variables' %}
    {% for name, variable in op_variables | items %}
        final {{ type_name_for_input_field(variable) }} {{ name }};
    {% endfor %}

    {{ typename }} (
        {% if op_variables | length > 0 %}
            {
            {{ field_initialization_logic(op_variables) }}
            }
        {% endif %}
    );

    JsonObject toJson() {
        JsonObject data = {};
        {{ toJson_macro(op_variables) }}
        return data;
    }

    {{ updateWith_macro(op_variables, typename) }}

}
{% endif %}
