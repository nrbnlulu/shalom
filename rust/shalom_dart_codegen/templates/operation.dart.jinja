{% include "macros" %}


{% set op_variables = operation.context.variables %}
{% set op_variables_exist = op_variables | length > 0 %}


// ignore_for_file: constant_identifier_names, non_constant_identifier_names, unused_import, camel_case_types, unnecessary_this, unnecessary_non_null_assertion, depend_on_referenced_packages, empty_statements

import "schema.shalom.dart";
{% for path, namespace_alias in extra_imports | items -%}
import '{{path}}' as {{ namespace_alias }};
{% endfor %}
{% set OP_TYPE = operation.context.op_ty.name|upper %}

import 'package:shalom_core/shalom_core.dart';
import 'package:collection/collection.dart';

{% if operation.context.used_fragments | length > 0 %}
    // Fragment imports
    {% for used_fragment in operation.context.used_fragments -%}
    import '{{used_fragment.name}}.shalom.dart';
    {% endfor -%}
{% endif %}


{% set operation_name = operation.context.operation_name %}


// ------------ OBJECT DEFINITIONS -------------

{% for full_name, selection in operation.context.type_defs | items  if selection.kind == "Object" %}
    {{selection_object_definition(full_name, selection)}}
{% endfor %}

// ------------ END OBJECT DEFINITIONS -------------

class Request{{ operation_name }} extends Requestable {
    {% if op_variables_exist %}
    final {{ operation_name }}Variables variables;
    {% endif %}

    Request{{ operation_name }}(
        {% if op_variables_exist %}
        {
            required this.variables,
        }
        {% endif %}
    );

    @override
    Request toRequest() {
        JsonObject variablesJson = {% if op_variables_exist %} variables.toJson() {% else %} {}  {% endif %};
        return Request(
            query: r"""{{ operation.context.query }}""",
            variables: variablesJson,
            opType: OperationType.{{ operation.context.op_ty.name }},
            opName: '{{ operation_name }}'
        );
    }
}

{% if op_variables_exist %}
class {{ operation_name }}Variables {
    {% set typename = operation_name ~ 'Variables' %}
    {% for name, variable in op_variables | items %}
        final {{ type_name_for_input_field(variable) }} {{ name }};
    {% endfor %}

    {{ typename }} (
        {% if op_variables_exist %}
            {
            {{ field_initialization_logic(op_variables) }}
            }
        {% endif %}
    );

    JsonObject toJson() {
        JsonObject data = {};
        {{ toJson_macro(op_variables) }}
        return data;
    }

    {{ updateWith_macro(op_variables, typename) }}

}
{% endif %}
