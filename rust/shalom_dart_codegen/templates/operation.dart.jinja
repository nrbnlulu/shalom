{% include "macros" %}

{# Recursive macro for deserializing selection values #}
{% macro _deserialize_selection_value_macro(value_symbol, selection, is_optional=false) %}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) %}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% else %}
                {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {% if is_optional %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
            {% else %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
            {% endif %}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ selection.full_name }}.fromJson({{ value_symbol }}, {ctx: ctx})
        {% else %}
            {{ selection.full_name }}.fromJson({{ value_symbol }}, {ctx: ctx})
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% set typename = selection.concrete_type.name %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ typename }}.fromString({{ value_symbol }})
        {% else %}
            {{ typename }}.fromString({{ value_symbol }})
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% else %}
            ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {% if is_optional %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
        {% else %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
        {% endif %}
    {% endif %}
{% endmacro %}


{# Recursive macro for serializing selection values #}
{% macro _serialize_selection_value_macro(value_symbol, selection, is_optional=false) %}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) %}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.serialize({{ value_symbol }}!)
            {% else %}
                {{ scalar_impl }}.serialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {{ value_symbol }}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% if is_optional %}
            {{ value_symbol }}?.toJson()
        {% else %}
            {{ value_symbol }}.toJson()
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% if is_optional %}
            {{ value_symbol }}?.name
        {% else %}
            {{ value_symbol }}.name
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }}?.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% else %}
            {{ value_symbol }}.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {{ value_symbol }}
    {% endif %}
{% endmacro %}

{# Recursive macro for equality comparison #}
{% macro _equality_comparison_macro(field_symbol, selection, other_symbol) %}
    {% if selection.kind == "List" %}
        const ListEquality().equals({{ other_symbol }}.{{ field_symbol }}, {{ field_symbol }})
    {% else %}
        {{ other_symbol }}.{{ field_symbol }} == {{ field_symbol }}
    {% endif %}
{% endmacro %}
// ignore_for_file: constant_identifier_names, non_constant_identifier_names, unused_import, camel_case_types, unnecessary_this, unnecessary_non_null_assertion, depend_on_referenced_packages

import "schema.shalom.dart";
{% for path, namespace_alias in extra_imports | items -%}
import '{{path}}' as {{ namespace_alias }};
{% endfor %}

import 'package:shalom_core/shalom_core.dart';
import 'package:collection/collection.dart';


{% set operation_name = operation.context.operation_name %}
{% macro selection_object_impl(typename, selection_object, is_root_selection) %}
    {% set selections = selection_object.selections %} 
    /// class members
    {% for selection in selections -%}
        {% set selection_name = selection.name %}
        final {{ type_name_for_selection(selection) }} {{ selection_name }};
    {% endfor %}
    // keywordargs constructor
    {{ typename }}({
    {% for selection in selections -%}
        {% if not selection.is_optional %}required{% endif %}
        this.{{ selection.name }},
    {% endfor %}
    });
    
    static ({{ typename }}, NormalizedRecordData) fromJson(JsonObject data, {DeserializationContext? ctx}) {
        final NormalizedRecordData record$Data = {};
        // define the object fields
        final RecordID? normalized$ID;
        
        {% if is_type_implements_node(selection_object.name) %}
            normalized$ID = data["id"] as String?;
        {% elif get_id_selection(selection_object.name) is not None -%}
            {% set id_field_name = get_id_selection(selection_object.name).name %}
        {% endif %}
        if (normalized$ID != null){
            ctx?.addReachableRecord(normalized$ID);
        }
        final NormalizedRecordData current$NormalizedRecord = {};
        
        {% for selection in selection_object.selections -%}
            {% set selection_typename = type_name_for_selection(selection) %}
            final {{ selection_typename }} {{selection.name}}$value;
        {% endfor -%}
        {% for selection in selection_object.selections -%}
            // TODO: handle arguments
            final {{selection.name}}Normalized$Key = "{{selection.name}}":
            final {{selection.name}}$raw = data["{{selection.name}}"];
            {% if selection.kind == "Object" %}
                final {{selection.name}}$res = {{ _deserialize_selection_value_macro(selection_name + '$raw', selection, selection.is_optional) }};
                {{selection.name}}$value = {{selection.name}}$res.0;
                current$NormalizedRecord[{{selection.name}}Normalized$Key] = {{selection.name}}$res.1;
            {% else %}
                {{selection.name}}$value =  {{ _deserialize_selection_value_macro(selection_name + '$raw', selection, selection.is_optional) }};
                current$NormalizedRecord[{{selection.name}}Normalized$Key] = {{selection.name}}$raw;
            {% endif %}
        {% endfor -%}
        
                
            {% endif %}
            
        {% endfor %}
        
    }
    
    static JsonObject _normalize$Response(JsonObject data, {OperationContextType? ctx, ReachableRecordsCtx? refsCtx}){
        {% for selection in selections %}
            {{
    }
    
    @override
    bool operator ==(Object other) {
    return identical(this, other) ||
    (other is {{ typename }} &&
    {% for selection in selections -%}
        {% set selection_name = selection.name %}
        {{ _equality_comparison_macro(selection_name, selection, "other") }} {{ "&&"|if_not_last(loop.last) }}
    {% endfor %}
    );
    }
    @override
    int get hashCode =>
    {% if selections | length > 1 %}
        Object.hashAll([
        {% for selection in selections %}
            {% set selection_name = selection.name %}
            {{ selection_name }},
        {% endfor %}
        ]);
    {% else %}
        {{ (selections | first).name }}.hashCode;
    {% endif %}
    JsonObject toJson() {
    return {
    {% for selection in selections %}
        {% set selection_name = selection.name %}
        '{{ selection_name }}':
            {% if selection.is_optional %}
                {{ _serialize_selection_value_macro("this." + selection_name, selection, true) }}
            {% else %}
                {{ _serialize_selection_value_macro("this." + selection_name, selection, false) }}
            {% endif %}
        ,
    {% endfor %}
    };
    }
{% endmacro %}
typedef JsonObject = Map<String, dynamic>;



{% set root_type_name = operation_name ~ "Response" %}
class {{ root_type_name }}{
{{ selection_object_impl(root_type_name, operation.context.root_type) }}
}

// ------------ OBJECT DEFINITIONS -------------

{% for full_name, selection in operation.context.type_defs | items  if selection.kind == "Object" %}
    class {{ full_name }}  {
        {{ selection_object_impl(full_name, selection) }}
    }
{% endfor %}

// ------------ END OBJECT DEFINITIONS -------------

{% set op_variables = operation.context.variables %}
class Request{{ operation_name }} extends Requestable {
    {% if op_variables | length > 0 %}
    final {{ operation_name }}Variables variables;
    {% endif %}

    Request{{ operation_name }}(
        {% if op_variables | length > 0 %}
        {
            required this.variables,
        }
        {% endif %}
    );

    @override
    Request toRequest() {
        JsonObject variablesJson = {% if op_variables | length > 0 %} variables.toJson() {% else %} {}  {% endif %};
        return Request(
            query: r"""{{ operation.context.query }}""",
            variables: variablesJson,
            opType: OperationType.{{ operation.context.op_ty.name }},
            opName: '{{ operation_name }}'
        );
    }
}

{% if op_variables | length > 0 %}
class {{ operation_name }}Variables {
    {% set typename = operation_name ~ 'Variables' %}
    {% for name, variable in op_variables | items %}
        final {{ type_name_for_input_field(variable) }} {{ name }};
    {% endfor %}

    {{ typename }} (
        {% if op_variables | length > 0 %}
            {
            {{ field_initialization_logic(op_variables) }}
            }
        {% endif %}
    );

    JsonObject toJson() {
        JsonObject data = {};
        {{ toJson_macro(op_variables) }}
        return data;
    }

    {{ updateWith_macro(op_variables, typename) }}

}
{% endif %}
