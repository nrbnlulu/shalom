{% set root_selection = operation.context.root_type.selection_name %}
{% macro base_object_impl(typename, selections) %}
    /// class memberes
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
            final {{ root_selection ~ type_name_for_selection(selection) }} {{ selection_name }};
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }};
        {% endif %}
    {% else %}
        throw NotImplemented();
    {% endfor %}
    // keywordargs constructor
    {{ typename }}({
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {% if not selection.is_optional %}required{% endif %}
        this.{{ selection_name }},
    {% endfor %}
    });
    static {{ typename }} fromJson(Map<String , dynamic> data) {
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
            final {{ root_selection ~ type_name_for_selection(selection) }} {{ selection_name }}_value;
            if (data['{{ selection_name }}'] != null) {
            {% if selection.is_optional %}
                {% set selection_typename = type_name_for_selection(selection)|replace("?", "") %}
            {% else %}
                {% set selection_typename = type_name_for_selection(selection) %}
            {% endif %}
            {{ selection_name }}_value = {{ root_selection ~ selection_typename }}.fromJson(data['{{ selection_name }}'] as Map<String , dynamic>);
            } else {
            {% if not selection.is_optional %}
                throw FormatException('{{ selection_name }} cannot be null');
            {% else %}
                {{ selection_name }}_value = null;
            {% endif %}
            }
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            {{ selection_name }}_value = data['{{ selection_name }}'] as {{ type_name_for_selection(selection) }};
        {% else %}
            throw NotImplemented();
        {% endif %}
    {% endfor %}
    return {{ typename }}(
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {{ selection_name }}: {{ selection_name }}_value,
    {% endfor %}
    );
    }
    {{ typename }} updateWithJson(Map<String , dynamic> data) {
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
            final {{ root_selection ~ type_name_for_selection(selection) }} {{ selection_name }}_value;
            if (data.containsKey('{{ selection_name }}')) {
            final Map<String, dynamic>? {{ selection_name }}_raw = data['{{ selection_name }}'];
            if ({{ selection_name }}_raw != null) {
            {% if selection.is_optional %}
                {% set selection_typename = type_name_for_selection(selection)|replace("?", "") %}
            {% else %}
                {% set selection_typename = type_name_for_selection(selection) %}
            {% endif %}
            {{ selection_name }}_value = {{ root_selection ~ selection_typename }}.fromJson({{ selection_name }}_raw);
            } else {
            {% if not selection.is_optional %}
                throw FormatException('{{ selection_name }} cannot be null');
            {% else %}
                {{ selection_name }}_value = null;
            {% endif %}
            }
            } else {
            {{ selection_name }}_value = {{ selection_name }};
            }
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            if (data.containsKey('{{ selection_name }}')) {
            {{ selection_name }}_value = data['{{ selection_name }}'] as {{ type_name_for_selection(selection) }};
            } else {
            {{ selection_name }}_value = {{ selection_name }};
            }
        {% else %}
            throw NotImplemented();
        {% endif %}
    {% endfor %}
    return {{ typename }}(
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {{ selection_name }}: {{ selection_name }}_value,
    {% endfor %}
    );
    }
    @override
    bool operator ==(Object other) {
    return identical(this, other) ||
    (other is {{ typename }} &&
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        other.{{ selection_name }} == {{ selection_name }} &&
    {% endfor %}
    true);
    }
    @override
    int get hashCode =>
    {% if selections | length > 1 %}
        Object.hashAll([
        {% for selection in selections %}
            {% set selection_name = selection.selection_name %}
            {{ selection_name }},
        {% endfor %}
        ]);
    {% else %}
        {{(selections | first).selection_name}}.hashCode;
    {% endif %}
    Map<String , dynamic> toJson() {
    return {
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        '{{ selection_name }}':
        {% if selection.kind == "Object" %}
            {{ selection_name }}{% if selection.is_optional %}?{% endif %}.toJson()
        {% elif selection.kind == "Scalar" %}
            {{ selection_name }}
        {% else %}
            throw NotImplemented();
        {% endif %}
        ,
    {% endfor %}
    };
    }
{% endmacro %}
// ignore_for_file: non_constant_identifier_names
{% set root_type_name %}
    Request{{ root_selection }}
{% endset %}
class {{ root_type_name }}{
{{ base_object_impl(root_type_name, operation.context.root_type.selections) }}
}
{% macro base_object_impl_recursive(selections) %}
    {% for selection in selections if selection.kind == "Object" %}
        {% if selection.is_optional %}
            {% set typename = type_name_for_selection(selection)|replace("?", "") %}
        {% else %}
            {% set typename = type_name_for_selection(selection) %}
        {% endif %}
        class {{ root_selection ~ typename }}  {
        {{ base_object_impl(root_selection ~ typename, selection.selections) }}
        }
        {{ base_object_impl_recursive(selection.selections) }}
    {% endfor %}
{% endmacro %}
{{ base_object_impl_recursive(operation.context.root_type.selections) }}
