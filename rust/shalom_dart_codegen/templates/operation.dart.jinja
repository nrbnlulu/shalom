{% macro generate_class(typename, selections, root, is_root=false) %}
/// {{typename}} class with selected fields from query
{% set classname = 'Request' ~ typename %}
class {{classname}} {
  /// Class fields
  {% for selection in selections %}
  {% if selection.kind == "Object" %}
  final Request{{root}}{{selection.selection_name|capitalize}}? {{selection.selection_name}};
  {% elif selection.kind == "Enum" %}
  final Request{{root}}{{selection.selection_name|capitalize}} {{selection.selection_name}};
  {% else %}
  final {{type_name_for_selection(selection)}} {{selection.selection_name}};
  {% endif %}
  {% endfor %}

  /// Constructor
  {{classname}}({
    {% for selection in selections %}
    {% if not selection.is_optional %}required {% endif %}this.{{selection.selection_name}},
    {% endfor %}
  });

  /// Creates from JSON
  factory {{classname}}.fromJson(Map<String, dynamic> json) => {{classname}}(
    {% for selection in selections %}
    {{selection.selection_name}}: {% if selection.kind == "Object" %}
      json['{{selection.selection_name}}'] != null 
        ? Request{{root}}{{selection.selection_name|capitalize}}.fromJson(json['{{selection.selection_name}}'] as Map<String, dynamic>)
        : null
    {% elif selection.kind == "Enum" %}
      Request{{root}}{{selection.selection_name|capitalize}}.fromString(json['{{selection.selection_name}}'] as String)
    {% else %}
      json['{{selection.selection_name}}'] as {{type_name_for_selection(selection)}}
    {% endif %},
    {% endfor %}
  );

  /// Updates from JSON
  {{classname}} updateWithJson(Map<String, dynamic> data) {
    return {{classname}}(
      {% for selection in selections %}
      {{selection.selection_name}}: {% if selection.kind == "Object" %}
        data.containsKey('{{selection.selection_name}}') 
          ? (data['{{selection.selection_name}}'] != null 
              ? Request{{root}}{{selection.selection_name|capitalize}}.fromJson(data['{{selection.selection_name}}'] as Map<String, dynamic>)
              : null)
          : this.{{selection.selection_name}}
      {% elif selection.kind == "Enum" %}
        data.containsKey('{{selection.selection_name}}')
          ? Request{{root}}{{selection.selection_name|capitalize}}.fromString(data['{{selection.selection_name}}'] as String)
          : this.{{selection.selection_name}}
      {% else %}
        data.containsKey('{{selection.selection_name}}') 
          ? data['{{selection.selection_name}}'] as {{type_name_for_selection(selection)}}
          : this.{{selection.selection_name}}
      {% endif %},
      {% endfor %}
    );
  }

  /// Converts to JSON
  Map<String, dynamic> toJson() => {
    {% for selection in selections %}
    '{{selection.selection_name}}': {% if selection.kind == "Object" %}
      {{selection.selection_name}}?.toJson()
    {% elif selection.kind == "Enum" %}
      {{selection.selection_name}}.toString()
    {% else %}
      {{selection.selection_name}}
    {% endif %},
    {% endfor %}
  };

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is {{classname}} &&
          {% for selection in selections %}
          other.{{selection.selection_name}} == {{selection.selection_name}} &&
          {% endfor %}
          true);

  @override
  int get hashCode => Object.hashAll([
    {% for selection in selections %}
    {{selection.selection_name}},
    {% endfor %}
  ]);
}
{% endmacro %}

{% set root_selection = operation.context.root_type.selection_name %}

// Then generate classes
{{generate_class(root_selection, operation.context.root_type.selections, root_selection, is_root=true)}}

{% macro generate_recursive_class(selections) %}
    {% for selection in selections if selection.kind == "Object" %}
        {{ generate_class(root_selection ~ selection.selection_name|capitalize, selection.selections, root_selection) }}
        {{ generate_recursive_class(selection.selections) }}
    {% endfor %}
{% endmacro %}

{# Entry point: start with root_type selections #}
{{ generate_recursive_class(operation.context.root_type.selections) }}