
    {% macro if_op_variables(insert) %}
    {% if op_variables_exist -%} {{insert}}
    {% endif -%}
    {% endmacro %}

{# Macro to generate cache key with arguments #}
{% macro generate_cache_key_with_args(field_name, arguments) -%}
{% if arguments | length > 0 -%}
"""{{field_name}}(
    {%- for arg in arguments -%}

    {%- if arg.value.kind == "VariableUse"  -%}
        {% if op_variables_exist -%}
            {%- set var_name = arg.value.common.name -%}
            {%- if arg.value.is_maybe -%}
                {{arg.name}}:${variables.{{var_name}}.isSome() ? (variables!.{{var_name}}.some()?.toString()) : 'None' }
            {%- else -%}
                {%- if arg.default_value is not none -%}
                   {{arg.name}}:${variables.{{var_name}} ?? '{{arg.default_value}}'}
                {%- else -%}
                {{arg.name}}:${variables.{{var_name}} }{% if arg.value.is_optional %} ?? 'null'{% endif %}}
                {%- endif -%}
            {%- endif -%}
        {%- else -%}
            {{arg.name}}:null
        {%- endif -%}
    {%- elif arg.value.InlineValue -%}
        "{{arg.name}}:{{arg.value.InlineValue.value}}"
    {%- endif -%}
    {{", " if not loop.last}}
    {%- endfor -%})"""
{%- else -%}
"{{field_name}}"
{%- endif -%}
{% endmacro %}

{# Recursive macro for deserializing selection values #}
{% macro _deserialize_selection_from_cache_macro(value_symbol, selection, is_optional=false, op_variables=[]) -%}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) -%}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% else %}
                {{ scalar_impl }}.deserialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {% if is_optional %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
            {% else %}
                {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
            {% endif %}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% set id_field = get_id_selection(selection.full_name) -%}
        {% if is_optional %}
            {{value_symbol}} == null ? null :
            {% if id_field is not none -%}
                {{selection.full_name}}.fromCached(
                    ctx.getCachedRecord({{value_symbol}} as String),
                    ctx{% if selection_uses_variables(selection) %}, variables{% endif %}
                )
            {% else %}
            {{ selection.full_name }}.fromCached({{ value_symbol }}, ctx{% if selection_uses_variables(selection) %}, variables{% endif %})
            {% endif -%}
    {% else %}
        {% if  id_field is not none -%}
            {{selection.full_name}}.fromCached(ctx.getCachedRecord({{value_symbol}} as String), ctx{% if selection_uses_variables(selection) %}, variables{% endif %})
        {% else %}
            {{ selection.full_name }}.fromCached({{value_symbol}}, ctx{% if selection_uses_variables(selection) %}, variables{% endif %})
        {% endif -%}
    {% endif %}
    {% elif selection.kind == "Union" %}
        {# Check if any union member has an ID (is normalized) by checking the first one #}
        {% set first_member = selection.inline_fragments | items | first %}
        {% if first_member %}
            {% set first_member_has_id = get_id_selection(first_member[1].full_name) %}
        {% else %}
            {% set first_member_has_id = none %}
        {% endif %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null :
            {% if first_member_has_id -%}
                {{ selection.full_name }}.fromCached({{ value_symbol }} as NormalizedRecordObject, ctx)
            {%- else -%}
                {{ selection.full_name }}.fromCached({{ value_symbol }}, ctx)
            {%- endif %}
        {% else %}
            {% if first_member_has_id -%}
                {{ selection.full_name }}.fromCached({{ value_symbol }} as NormalizedRecordObject, ctx)
            {%- else -%}
                {{ selection.full_name }}.fromCached({{ value_symbol }}, ctx)
            {%- endif %}
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% set typename = selection.concrete_type.name %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ typename }}.fromString({{ value_symbol }})
        {% else %}
            {{ typename }}.fromString({{ value_symbol }})
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_from_cache_macro("e", inner_selection, false) }}).toList()
        {% else %}
            ({{ value_symbol }} as List<dynamic>).map((e) => {{ _deserialize_selection_from_cache_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {% if is_optional %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}?
        {% else %}
            {{ value_symbol }} as {{ dart_type_for_scalar_name(selection.concrete_type.name) }}
        {% endif %}
    {% endif %}
{% endmacro %}


{# Recursive macro for serializing selection values #}
{% macro _serialize_selection_value_macro(value_symbol, selection, is_optional=false) %}
    {% if selection.kind == "Scalar" %}
        {% if selection.is_custom_scalar %}
            {% set scalar_impl = custom_scalar_impl_fullname(selection.concrete_type.name) %}
            {% if is_optional %}
                {{ value_symbol }} == null ? null : {{ scalar_impl }}.serialize({{ value_symbol }}!)
            {% else %}
                {{ scalar_impl }}.serialize({{ value_symbol }})
            {% endif %}
        {% else %}
            {{ value_symbol }}
        {% endif %}
    {% elif selection.kind == "Object" %}
        {% if is_optional %}
            {{ value_symbol }}?.toJson()
        {% else %}
            {{ value_symbol }}.toJson()
        {% endif %}
    {% elif selection.kind == "Union" %}
        {% if is_optional %}
            {{ value_symbol }}?.toJson()
        {% else %}
            {{ value_symbol }}.toJson()
        {% endif %}
    {% elif selection.kind == "Enum" %}
        {% if is_optional %}
            {{ value_symbol }}?.name
        {% else %}
            {{ value_symbol }}.name
        {% endif %}
    {% elif selection.kind == "List" %}
        {% set inner_selection = selection.of_kind %}
        {% if is_optional %}
            {{ value_symbol }}?.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% else %}
            {{ value_symbol }}.map((e) => {{ _serialize_selection_value_macro("e", inner_selection, false) }}).toList()
        {% endif %}
    {% else %}
        {{ value_symbol }}
    {% endif %}
{% endmacro %}

{# Recursive macro for equality comparison #}
{% macro selection_equality_comparison_macro(selection, symbol1, symbol2, ne=False) %}
    {% if selection.kind == "List" %}
        {% if ne %}!{% endif %}const ListEquality().equals({{symbol1}}, {{ symbol2 }})
    {% else %}
        {% if ne %}
            {{ symbol1 }} != {{ symbol2 }}
        {% else %}
            {{ symbol1 }} == {{ symbol2 }}
        {% endif %}
    {% endif %}
{% endmacro %}

    {% macro selection_object_impl(typename, selection_object, is_root_selection, full_name=none, is_union_member=false, shared_selections=none) %}
        {% set lookup_name = full_name if full_name else typename %}
        {% set selections = get_all_selections_for_object(lookup_name) %}
        {# For union members, merge shared selections with object selections, avoiding duplicates #}
        {% if is_union_member and shared_selections %}
            {% set member_names = selections | map(attribute='name') | list %}
            {% set shared_selections_filtered = shared_selections | rejectattr('name', 'in', member_names) %}
            {% set selections = shared_selections_filtered + selections %}
        {% endif %}
        /// class members
        {% for selection in selections -%}
            {% set selection_name = selection.name %}
            {% if is_union_member and selection_name == "__typename" %}
            final {{ type_name_for_selection(selection) }} typename_;
            {% else %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }};
            {% endif %}
        {% endfor %}

        {% if is_union_member %}
        // Getter for typename (public accessor for __typename field)
        {% for selection in selections %}
            {% if selection.name == "__typename" %}
        String get typename => typename_;
            {% endif %}
        {% endfor %}
        {% endif %}

        // keywordargs constructor
        {% if is_union_member %}const {% endif %}{{ typename }}({
        {% for selection in selections -%}
            {% if is_union_member and selection.name == "__typename" %}
                {% if not selection.is_optional %}required{% endif %} String $typename,
            {% else %}
                {% if not selection.is_optional %}required{% endif %}
                this.{{ selection.name }},
            {% endif %}
        {% endfor %}
        }){% if is_union_member %}{% for selection in selections %}{% if selection.name == "__typename" %} : typename_ = $typename{% endif %}{% endfor %}{% endif %};

        static void normalize$inCache(JsonObject data,
                CacheUpdateContext ctx,
                {% if not is_union_member and selection_uses_variables(selection_object) %} {{ operation_name }}Variables variables,{% endif %}
                {% if not is_root_selection -%}
                    {
                    /// can be just the selection name but also may include serialized arguments.
                    required RecordID  this$fieldName,
                    required JsonObject parent$record,
                    required RecordID parent$normalizedID
                    }
                {% endif -%}
                ){
            {% if is_root_selection -%}
                final String this$normalizedID = "ROOT_{{OP_TYPE}}";
                final this$NormalizedRecord = ctx.getOrCreateCachedObjectRecord("ROOT_{{OP_TYPE}}");
            {% else %}
                {% set id_field = get_id_selection(lookup_name) -%}
                {% set is_normalized = false -%}
                String this$normalizedID;
                JsonObject this$NormalizedRecord;
                {% if id_field is not none -%}
                    final RecordID? this$normalizedID_temp = data["{{id_field.name}}"] as RecordID?;
                    if (this$normalizedID_temp == null) {
                        {% if id_field.is_optional %}
                            this$normalizedID = "${parent$normalizedID}.${this$fieldName}";
                            this$NormalizedRecord = getOrCreateObject(parent$record, this$fieldName);
                        {% else %}
                            throw UnimplementedError("Required ID cannot be null");
                        {% endif %}
                    } else {
                        this$normalizedID = this$normalizedID_temp!;
                        final typename = data["__typename"] as String;
                        parent$record[this$fieldName] = NormalizedRecordObject(typename: typename, id: this$normalizedID);
                        this$NormalizedRecord = ctx.getOrCreateCachedObjectRecord(this$normalizedID);
                        ctx.addDependantRecord(this$normalizedID);
                        {% set is_normalized = true -%}
                    }
                {% else %}
                    this$NormalizedRecord = getOrCreateObject(parent$record, this$fieldName);
                    this$normalizedID = "${parent$normalizedID}.${this$fieldName}";
                {% endif -%}
            {% endif -%}


            {% for selection in selections -%}
                final {{selection.name}}Normalized$Key = {{ generate_cache_key_with_args(selection.name, selection.arguments) }};
                final {{selection.name}}$normalizedID = "${this$normalizedID}.${ {{selection.name}}Normalized$Key}";
            {% endfor -%}
            ctx.addDependantRecords(
                {
                {% for selection in selections -%}
                    {{selection.name}}$normalizedID  {{"," if not loop.last}}
                {% endfor -%}
                }
            );

            {% for selection in selections -%}
                final {{selection.name}}$cached = this$NormalizedRecord[{{selection.name}}Normalized$Key];
                final {{selection.name}}$raw = data["{{selection.name}}"];
                if ({{selection.name}}$raw != null){
                    {% if selection.kind == "Object" %}
                        {# object selections can be subscribed to, but will only get updates for
                         null<->some changes. sub fields should be subscribed by themself #}
                        if ({{selection.name}}$cached == null){
                            ctx.addChangedRecord({{selection.name}}$normalizedID);
                        }
                        {{selection.full_name}}.normalize$inCache(
                            {{selection.name}}$raw as JsonObject,
                            ctx,
                            {% if selection_uses_variables(selection) %}variables,{% endif %}
                            this$fieldName: {{selection.name}}Normalized$Key,
                            parent$record: this$NormalizedRecord,
                            parent$normalizedID: this$normalizedID
                        );
                    {% elif selection.kind == "Union" %}
                        {# union selections are similar to objects - dispatch to correct type based on __typename #}
                        if ({{selection.name}}$cached == null){
                            ctx.addChangedRecord({{selection.name}}$normalizedID);
                        }
                        {{selection.full_name}}.normalize$inCache(
                            {{selection.name}}$raw as JsonObject,
                            ctx,
                            {% if selection_uses_variables(selection) %}variables,{% endif %}
                            this$fieldName: {{selection.name}}Normalized$Key,
                            parent$record: this$NormalizedRecord,
                            parent$normalizedID: this$normalizedID
                        );
                    {% else %}
                        {% set cached_sym %} {{selection.name}}$cached {% endset %}
                        {% set raw_sym %} {{selection.name}}$raw {% endset %}
                        if (
                            {{selection_equality_comparison_macro(selection, cached_sym, raw_sym, ne=True)}}
                        ){
                            ctx.addChangedRecord({{selection.name}}$normalizedID);
                        }
                        this$NormalizedRecord[{{selection.name}}Normalized$Key] = {{selection.name}}$raw;
                    {% endif %}
                } else if (data.containsKey("{{selection.name}}") && {{selection.name}}$cached != null){
                        // if this field was null in the response and key exists clear the cache.

                        this$NormalizedRecord[{{selection.name}}Normalized$Key] = null;
                        ctx.addChangedRecord({{selection.name}}$normalizedID);
                } else {
                    // data is null and cache is null, do nothing.
                    this$NormalizedRecord[{{selection.name}}Normalized$Key] = null;
                }

            {% endfor -%}
        }
        {% if not is_root_selection -%}
        static {{typename}} fromCached(NormalizedRecordData data, ShalomCtx ctx{% if not is_union_member and selection_uses_variables(selection_object)  %}, {{ operation_name }}Variables variables{% endif %}) {
        {% else -%}
        static {{typename}} fromCache(ShalomCtx ctx{% if selection_uses_variables(selection_object) -%}, {{ operation_name }}Variables variables{% endif %}) {
        {% endif -%}
            {% if is_root_selection -%}
                final data = ctx.getCachedRecord("ROOT_{{OP_TYPE}}");
            {% endif -%}
            {% for selection in selections -%}
                {% set raw_value_symbol = selection.name + '$raw' -%}
                {% if selection.arguments | length > 0 -%}
                    final {{selection.name}}$cacheKey = {{ generate_cache_key_with_args(selection.name, selection.arguments) }};
                    final {{raw_value_symbol}} = data[{{selection.name}}$cacheKey];
                {% else -%}
                    final {{raw_value_symbol}} = data["{{selection.name}}"];
                {% endif -%}
                final {{type_name_for_selection(selection)}} {{selection.name}}$value = {{ _deserialize_selection_from_cache_macro(raw_value_symbol, selection, selection.is_optional, op_variables) }};
            {% endfor -%}
            return {{ typename }}(
                {% for selection in selections -%}
                    {% if is_union_member and selection.name == "__typename" %}
                    $typename: {{selection.name}}$value,
                    {% else %}
                    {{selection.name}}: {{selection.name}}$value,
                    {% endif %}
                {% endfor %}
            );
        }
        {% if is_root_selection -%}
            static ({{typename}}, CacheUpdateContext)  fromResponseImpl(JsonObject data, ShalomCtx ctx{% if op_variables_exist %}, {{ operation_name }}Variables variables{% endif %}){
                // first update the cache
                final CacheUpdateContext updateCtx = CacheUpdateContext(shalomContext: ctx!);
                {% set root_selection = selections | first -%}

                normalize$inCache(
                    data,
                    updateCtx,
                    {{if_op_variables("variables")}}
                );
                ctx.invalidateRefs(updateCtx.changedRecords);
                return (fromCache(ctx{{if_op_variables(", variables")}}), updateCtx);
            }

            static {{typename}} fromResponse(JsonObject data, {ShalomCtx? ctx{% if op_variables_exist %}, required {{ operation_name }}Variables variables{% endif %}}){
                // if ctx not provider we create dummy one
                return fromResponseImpl(data, ctx ?? ShalomCtx.withCapacity(){{if_op_variables(", variables")}}).$1;
            }
        {% endif -%}

        @override
        bool operator ==(Object other) {
        return identical(this, other) ||
        (other is {{ typename }} &&
        {% for selection in selections -%}
            {% if is_union_member and selection.name == "__typename" %}
                {% set other_selection %}other.typename_{% endset -%}
                {{ selection_equality_comparison_macro(selection, "typename_", other_selection) }} {{ "&&" if not loop.last }}
            {% else %}
                {% set other_selection %}other.{{selection.name}}{% endset -%}
                {{ selection_equality_comparison_macro(selection, selection.name, other_selection) }} {{ "&&" if not loop.last }}
            {% endif %}
        {% endfor -%}
        );
        }
        @override
        int get hashCode =>
        {% if selections | length > 1 -%}
            Object.hashAll([
            {% for selection in selections %}
                {% set selection_name = selection.name %}
                {% if is_union_member and selection_name == "__typename" %}
                typename_,
                {% else %}
                {{ selection_name }},
                {% endif %}
            {% endfor %}
            ]);
        {% else %}
            {% if is_union_member and (selections | first).name == "__typename" %}
            typename_.hashCode;
            {% else %}
            {{ (selections | first).name }}.hashCode;
            {% endif %}
        {% endif %}
        JsonObject toJson() {
        return {
        {% for selection in selections %}
            {% set selection_name = selection.name %}
            '{{ selection_name }}':
                {% if is_union_member and selection_name == "__typename" %}
                    {% if selection.is_optional %}
                        {{ _serialize_selection_value_macro("typename_", selection, true) }}
                    {% else %}
                        {{ _serialize_selection_value_macro("typename_", selection, false) }}
                    {% endif %}
                {% else %}
                    {% if selection.is_optional %}
                        {{ _serialize_selection_value_macro("this." + selection_name, selection, true) }}
                    {% else %}
                        {{ _serialize_selection_value_macro("this." + selection_name, selection, false) }}
                    {% endif %}
                {% endif %}
            ,
        {% endfor %}
        };
        }
{% endmacro %}

{% macro selection_object_definition(full_name, selection, union_parent_name=none, is_union_member=false) -%}
    class {{ full_name }}{% if is_union_member %} extends {{ union_parent_name }}{% endif %}{% if selection.used_fragments | length > 0 %}{% if is_union_member %},{% endif %} implements {% for frag_name in selection.used_fragments %}{{ frag_name }}{{ ", " if not loop.last }}{% endfor %}{% endif %}  {
        {{ selection_object_impl(full_name, selection, false, full_name, is_union_member=is_union_member) }}
    }
{% endmacro %}



{# Macro for union selection sealed class - just the sealed class and dispatch logic -#}
{% macro selection_union_definition(full_name, selection) -%}
    // Union sealed class
    sealed class {{ full_name }} {
        const {{ full_name }}();

        static void normalize$inCache(
            JsonObject data,
            CacheUpdateContext ctx,
            {% if op_variables_exist %}{{ operation_name }}Variables variables,{% endif %}
            {
                required RecordID this$fieldName,
                required JsonObject parent$record,
                required RecordID parent$normalizedID
            }
        ) {
            final typename = data["__typename"] as String;
            switch (typename) {
                {% for type_condition, obj_selection in selection.inline_fragments | items %}
                case "{{ type_condition }}":
                    {{ full_name }}_{{ type_condition }}.normalize$inCache(
                        data,
                        ctx,
                        this$fieldName: this$fieldName,
                        parent$record: parent$record,
                        parent$normalizedID: parent$normalizedID
                    );
                    break;
                {% endfor %}
                default:
                    throw Exception("Unknown __typename: $typename for union {{ selection.union_type.name }}");
            }
        }

        static {{ full_name }} fromCached(NormalizedRecordData data, ShalomCtx ctx) {
            // Handle normalized objects (stored as NormalizedRecordObject)
            if (data is NormalizedRecordObject) {
                final typename = data.typename;
                final actualData = ctx.getCachedRecord(data.id);
                switch (typename) {
                    {% for type_condition, obj_selection in selection.inline_fragments | items %}
                    case "{{ type_condition }}":
                        return {{ full_name }}_{{ type_condition }}.fromCached(actualData, ctx);
                    {% endfor %}
                    default:
                        throw Exception("Unknown __typename: $typename for union {{ selection.union_type.name }}");
                }
            } else {
                // Handle non-normalized objects (stored as JsonObject)
                final typename = data["__typename"] as String;
                switch (typename) {
                    {% for type_condition, obj_selection in selection.inline_fragments | items %}
                    case "{{ type_condition }}":
                        return {{ full_name }}_{{ type_condition }}.fromCached(data, ctx);
                    {% endfor %}
                    default:
                        throw Exception("Unknown __typename: $typename for union {{ selection.union_type.name }}");
                }
            }
        }

        JsonObject toJson();

        @override
        bool operator ==(Object other);

        @override
        int get hashCode;
    }
{% endmacro %}
