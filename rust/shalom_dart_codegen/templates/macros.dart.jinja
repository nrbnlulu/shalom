

{# Helper macro for serializing a field value recursively #}
{% macro _serialize_field_value_macro(value_symbol, field_type, is_optional=false) %}
    {% if field_type.kind == "Scalar" and is_custom_scalar(field_type.name) %}
        {% set scalar_impl = custom_scalar_impl_fullname(field_type.name) %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ scalar_impl }}.serialize({{ value_symbol }}!)
        {% else %}
            {{ scalar_impl }}.serialize({{ value_symbol }})
        {% endif %}
    {% elif field_type.kind == "InputObject" %}
        {% if is_optional %}
            {{ value_symbol }}?.toJson()
        {% else %}
            {{ value_symbol }}.toJson()
        {% endif %}
    {% elif field_type.kind == "Enum" %}
        {% if is_optional %}
            {{ value_symbol }}?.name
        {% else %}
            {{ value_symbol }}.name
        {% endif %}
    {% elif field_type.kind == "List" %}
        {% set inner_type = field_type.of_type.ty %}
        {% if is_optional %}
            {{ value_symbol }}?.map((e) => {{ _serialize_field_value_macro("e", inner_type, field_type.of_type.is_optional) }}).toList()
        {% else %}
            {{ value_symbol }}.map((e) => {{ _serialize_field_value_macro("e", inner_type, field_type.of_type.is_optional) }}).toList()
        {% endif %}
    {% else %}
        {{ value_symbol }}
    {% endif %}
{% endmacro %}

{# Helper macro for deserializing a field value recursively #}
{% macro _deserialize_field_value_macro(value_symbol, field_type, is_optional=false) %}
    {% if field_type.kind == "Scalar" and is_custom_scalar(field_type.name) %}
        {% set scalar_impl = custom_scalar_impl_fullname(field_type.name) %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ scalar_impl }}.deserialize({{ value_symbol }})
        {% else %}
            {{ scalar_impl }}.deserialize({{ value_symbol }})
        {% endif %}
    {% elif field_type.kind == "InputObject" %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ field_type.name }}.fromJson({{ value_symbol }})
        {% else %}
            {{ field_type.name }}.fromJson({{ value_symbol }})
        {% endif %}
    {% elif field_type.kind == "Enum" %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : {{ field_type.name }}.values.byName({{ value_symbol }})
        {% else %}
            {{ field_type.name }}.values.byName({{ value_symbol }})
        {% endif %}
    {% elif field_type.kind == "List" %}
        {% set inner_type = field_type.of_type.ty %}
        {% if is_optional %}
            {{ value_symbol }} == null ? null : ({{ value_symbol }} as List).map((e) => {{ _deserialize_field_value_macro("e", inner_type, field_type.of_type.is_optional) }}).toList()
        {% else %}
            ({{ value_symbol }} as List).map((e) => {{ _deserialize_field_value_macro("e", inner_type, field_type.of_type.is_optional) }}).toList()
        {% endif %}
    {% else %}
        {{ value_symbol }}
    {% endif %}
{% endmacro %}

{% macro _deserialize_field_macro(field_name, field, hashmap_sym) %}
    {% set field_ty = resolve_field_type(field.common).ty %}
    {% if field.is_optional and field.default_value is none %}
        final {{ field_name }}Value = {{ hashmap_sym }}["{{ field_name }}"];
        final {{ type_name_for_input_field(field) }} {{ field_name }};
        if ({{ field_name }}Value == null) {
            {{ field_name }} = const None();
        } else {
            {{ field_name }} = Some({{ _deserialize_field_value_macro(field_name + "Value", field_ty, true) }});
        }
    {% else %}
        {% if field.is_optional %}
            final {{ type_name_for_input_field(field) }} {{ field_name }} = {{ _deserialize_field_value_macro(hashmap_sym + '["' + field_name + '"]', field_ty, true) }};
        {% else %}
            final {{ type_name_for_input_field(field) }} {{ field_name }} = {{ _deserialize_field_value_macro(hashmap_sym + '["' + field_name + '"]', field_ty, false) }};
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro toJson_macro(fields) %}
{% for name, field in fields | items %}
    {% set field_ty = resolve_field_type(field.common).ty %}
    {% if field.is_optional and field.default_value is none %}
        if ({{ name }}.isSome()) {
            final value = this.{{ name }}.some();
            data["{{ name }}"] = {{ _serialize_field_value_macro("value", field_ty, true) }};
        }
    {% else %}
        data["{{ name }}"] = {{ _serialize_field_value_macro("this." + name, field_ty, field.is_optional) }};
    {% endif %}
{% endfor %}
{% endmacro %}

{% macro updateWith_macro(fields, typename) %}
{{typename}} updateWith(
    {
        {% for name, field in fields | items %}
            {% if field.is_optional %}
                Maybe<{{type_name_for_input_field(field)}}> {{name}} = const None()
            {% else %}
                {{type_name_for_input_field(field)}}? {{name}}
            {% endif %}
            {% if not loop.last %},{% endif %}
        {% endfor %}
    }
) {
    {% for name, field in fields | items %}
        final {{ type_name_for_input_field(field) }} {{ name }}$next;
        {% if field.is_optional %}
            switch ({{name}}) {
{# if this is a "maybe" field #}
                case Some(value: final updateData):
                    {{ name }}$next = updateData;
                case None():
                    {{ name }}$next = this.{{name}};
            }

        {% else %}
            if ({{name}} != null) {
                {{ name }}$next = {{name}};
            } else {
                {{ name }}$next = this.{{name}};
            }
        {% endif %}
    {% endfor %}
    return {{ typename }}(
        {% for name, field in fields | items %}
            {{ name }}: {{ name }}$next
            {% if not loop.last %},{% endif %}
        {% endfor %}
    );
}
{% endmacro %}

{% macro field_initialization_logic(fields) %}
{% for name, field in fields | items %}
    {% if not field.is_optional %}
        {% if field.default_value is not none  %}
            required this.{{ name }} = {{ parse_field_default_value(field) }}
        {% else %}
            required this.{{name}}
        {% endif %},
    {% else %}
        {% if field.default_value is not none %}
            {% set default_value = parse_field_default_value(field) %}
            {% if default_value == "null" %}
                this.{{ name }}
            {% else %}
                this.{{ name }} = {{ default_value }}
            {% endif %}
        {% else %}
            this.{{ name }} = const None()
        {% endif %},
    {% endif %}
    {% endfor %}
{% endmacro %}

{# Macro to check if a list of selections uses variables #}
{% macro uses_variables(selections) -%}
{% for sel in selections %}
{% for arg in sel.arguments %}
{% if arg.value.__class__.__name__ == 'VariableUse' %}
true
{% endif %}
{% endfor %}
{% endfor %}
false
{%- endmacro %}
