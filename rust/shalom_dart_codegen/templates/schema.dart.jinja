// ignore_for_file: constant_identifier_names, non_constant_identifier_names, unused_import, unnecessary_this, unnecessary_non_null_assertion, depend_on_referenced_packages
{% include "macros" %}
{% if schema.context.types.inputs | length > 0 %}
import 'package:shalom_core/shalom_core.dart';
{% endif %}
{{ custom_scalar_imports_macro(custom_scalar_imports) }}






// ------------ Enum DEFINITIONS -------------
{% for _, enum in schema.context.types.enums | items %}
     {% set typename = enum.name %}
     {{docstring(enum.description)}}
     enum {{ typename }}  {
          {% for name, value in enum.members | items -%}
                {{docstring(value.description)}}
                {{ name }} {{"," if not loop.last else ";"}}
          {% endfor %}

          static {{ typename }} fromString(String name) {
              switch (name) {
                  {% for name, _ in enum.members | items %}
                  case '{{ name }}':
                    return {{ typename }}.{{name}};                   {% endfor %}
                  default:
                      throw ArgumentError.value(name, 'name', 'No enum member with this name');
              }
          }

      }
{% endfor %}
// ------------ END Enum DEFINITIONS -------------
// ------------ Input DEFINITIONS -------------
{% for _, input_object in schema.context.types.inputs | items %}
{% set typename = input_object.name %}
{% set fields_requiring_initializer_list = get_fields_requiring_initializer_list(input_object.fields) %}
class {{ typename }} {
    {% for name, field in input_object.fields | items -%}
        final {{ type_name_for_input_field(field) }} {{ name }};
    {% endfor -%}
    {{ typename }}(
        {
        {% for name, field in input_object.fields | items -%}
            {% if name not in fields_requiring_initializer_list -%}
                {{input_field_constructor_initialization(name, field, false)}},
            {% endif -%}
        {% endfor -%}
        {% for name, field in fields_requiring_initializer_list | items -%}
            {{input_field_constructor_initialization(name, field, true)}},
        {% endfor -%}
        }
    ){{ field_initialization_initializers(input_object.fields) }};

    JsonObject toJson() {
        JsonObject data = {};
        {{ toJson_macro(input_object.fields) }}
        return data;
    }

    @override
    String toString() {
        return toJson().toString();
    }

  {{ updateWith_macro(input_object.fields, typename) }}
}

{% endfor %}
// ------------ END Input DEFINITIONS -------------
