{% for object_name, object in context.types.objects %}
class {{ object.name }}Selection {
  {% for field in object.fields %}
  bool select{{ field.name | capitalize }} = false;
  {% if field.ty.kind in ["Named", "NonNullNamed"] and field.ty.name in context.types.objects %}
  {{ field.ty.name }}Selection {{ field.name }}Selection = {{ field.ty.name }}Selection();
  {% endif %}
  {% endfor %}

  Map<String, dynamic> inputs = {};

  {{ object.name }}Selection({
    {% for field in object.fields %}
    this.select{{ field.name | capitalize }} = false,
    {% if field.ty.kind in ["Named", "NonNullNamed"] and field.ty.name in context.types.objects %}
    {{ field.name }}Selection,
    {% endif %}
    {% endfor %}
    this.inputs = const {},
  });

  void selectField(String fieldName) {
    switch (fieldName) {
      {% for field in object.fields %}
      case '{{ field.name }}':
        select{{ field.name | capitalize }} = true;
        break;
      {% endfor %}
      default:
        throw Exception('Unknown field: \$fieldName');
    }
  }

  Map<String, bool> getSelectedFields() {
    return {
      {% for field in object.fields %}
      '{{ field.name }}': select{{ field.name | capitalize }},
      {% endfor %}
    };
  }

  String toGraphQLSelection() {
    final fields = <String>[];
    {% for field in object.fields %}
    if (select{{ field.name | capitalize }}) {
      {% if field.ty.kind in ["Named", "NonNullNamed"] and field.ty.name in context.types.objects %}
      final subFields = {{ field.name }}Selection.toGraphQLSelection();
      if (subFields.isNotEmpty) {
        fields.add('{{ field.name }} { \$subFields }'.replaceAll('\$subFields', subFields));
      } else {
        fields.add('{{ field.name }}');
      }
      {% else %}
      fields.add('{{ field.name }}');
      {% endif %}
    }
    {% endfor %}
    return fields.join(' ');
  }

  /// Full GraphQL query string generator
  String toGraphQLQuery({
    String rootField = '{{ object_name|lower }}',
  }) {
    final selection = toGraphQLSelection();
    if (selection.isEmpty) return '';

    final buffer = StringBuffer();
    buffer.write('{ ');
    buffer.write(rootField);

    if (inputs.isNotEmpty) {
      final args = inputs.entries.map((e) {
        final value = e.value;
        if (value is String) {
          return '\${e.key}: "\${value}"';
        } else if (value is bool) {
          return '\${e.key}: \${value.toString()}';
        } else {
          return '\${e.key}: \${value}';
        }
      }).join(', ');
      buffer.write('(\$args)'.replaceAll('\$args', args));
    }

    buffer.write(' { ');
    buffer.write(selection);
    buffer.write(' } ');
    buffer.write('}');

    return buffer.toString();
  }
}
{% endfor %}
